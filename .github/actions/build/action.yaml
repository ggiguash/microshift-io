name: build-rpms-and-images
description: Reusable action to build MicroShift RPMs and container images

inputs:
  ushift-branch:
    description: MicroShift branch from https://github.com/openshift/microshift/branches
    required: true
    type: string
  okd-version-tag:
    description: OKD version tag from https://quay.io/repository/okd/scos-release?tab=tags
    required: true
    type: string
  bootc-image-url:
    description: Base Bootc image URL used in `make image` command
    required: false
    default: quay.io/centos-bootc/centos-bootc
    type: string
  bootc-image-tag:
    description: Base Bootc image tag used in `make image` command
    required: false
    default: stream9
    type: string
  isolated-network:
    description: Build and test the isolated network container image
    required: false
    default: 0
    type: integer
  ovnk-networking:
    description: Use OVN-K networking
    required: false
    default: 0
    type: integer
  multinode:
    description: Build and test the multinode container image
    required: false
    default: 0
    type: integer
  build:
    type: choice
    description: Types of artifacts to build
    required: true
    options:
    - all
    - rpms
    - bootc-image

runs:
  using: "composite"
  steps:
    - name: Detect the CPU architecture
      id: detect-cpu-arch
      uses: ./.github/actions/arch

    - name: Collect debug information before the build
      if: always()
      uses: ./.github/actions/debug-info

    - name: Prepare the build and run environment
      uses: ./.github/actions/prebuild

    - name: Build MicroShift RPMs
      shell: bash
      run: |
        # See https://github.com/microshift-io/microshift/blob/main/docs/build.md
        # for more information about the build process.

        # Run the RPM build process.
        cd ${GITHUB_WORKSPACE}/
        make rpm \
          USHIFT_BRANCH=${{ inputs.ushift-branch }} \
          OKD_VERSION_TAG=${{ inputs.okd-version-tag }} \
          RPM_OUTDIR=/mnt/rpms

    - name: Build MicroShift bootc container image
      if: contains(fromJSON('["all", "bootc-image"]'), inputs.build)
      shell: bash
      run: |
        # See https://github.com/microshift-io/microshift/blob/main/docs/build.md
        # for more information about the build process.

        # Run the container image build process.
        cd ${GITHUB_WORKSPACE}/

        # Adjust the make options based on the inputs
        make_opts=()
        [ "${{ inputs.isolated-network }}" = "1" ] && make_opts+=("EMBED_CONTAINER_IMAGES=1")
        [ "${{ inputs.ovnk-networking }}"  = "1" ] && make_opts+=("WITH_KINDNET=0")
        [ "${{ inputs.multinode }}" = "1" ] && make_opts+=("WITH_MULTINODE=1")

        make image \
          BOOTC_IMAGE_URL=${{ inputs.bootc-image-url }} \
          BOOTC_IMAGE_TAG=${{ inputs.bootc-image-tag }} \
          ${make_opts[@]}

    - name: Run a test to verify that MicroShift is functioning properly
      if: contains(fromJSON('["all", "bootc-image"]'), inputs.build)
      shell: bash
      run: |
        # See https://github.com/microshift-io/microshift/blob/main/docs/run.md
        # for more information about the run process.

        # Adjust the make options based on the inputs
        make_opts=()
        [ "${{ inputs.isolated-network }}" = "1" ] && make_opts+=("ISOLATED_NETWORK=1")

        # Run the MicroShift container
        make run ${make_opts[@]}

        # Verify that Internet access is not available in the container
        # when the isolated network is enabled
        if [ "${{ inputs.isolated-network }}" = "1" ]; then
          for cmd in "ping -c1 8.8.8.8" "curl -I quay.io" "curl -I ghcr.io"; do
            if sudo podman exec -i microshift-okd ${cmd} ; then
              echo "ERROR: Internet access is available in the isolated network container"
              exit 1
            fi
          done
        fi

        # Start-stop test with readiness check
        if [ "${{ inputs.multinode }}" = "1" ]; then
          make multinode-create
          make multinode-delete
        else
          make run-ready
          make run-healthy
          make stop
        fi

    # Uncomment this to enable tmate-debug on failure
    # - name: Pause and open tmate debug session
    #   if: failure()
    #   uses: ./.github/actions/tmate-debug

    - name: Collect debug information after the build
      if: always()
      uses: ./.github/actions/debug-info

    - name: Collect MicroShift container sosreport on failure
      if: failure()
      shell: bash
      run: |
        set -euo pipefail
        set -x

        # Check if the MicroShift container is running
        if ! sudo podman ps --format "{{.Names}}" | grep -q '^microshift-okd$' ; then
          echo "WARNING: MicroShift container is not running - cannot collect sos report"
          exit 0
        fi

        # Collect sos report from the MicroShift container
        sudo podman exec -i microshift-okd microshift-sos-report
        for f in $(sudo podman exec -i microshift-okd bash -c 'ls -1 /tmp/sosreport-*'); do
          sudo podman cp microshift-okd:${f} /mnt/tmp/
          sudo chmod 644 "/mnt/tmp/$(basename "${f}")"
        done

    - name: Upload sos report to the GitHub Actions artifact
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: sosreport-microshift-okd-${{ github.job }}-${{ steps.detect-cpu-arch.outputs.arch }}-${{ github.run_id }}
        path: /mnt/tmp/sosreport-*
        compression-level: 0
