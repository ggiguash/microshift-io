name: build-deb-packages
description: Reusable action to build MicroShift Debian packages

inputs:
  ushift-branch:
    description: MicroShift branch from https://github.com/openshift/microshift/branches
    required: true
    type: string
  okd-version-tag:
    description: OKD version tag from https://quay.io/repository/okd/scos-release?tab=tags
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: Detect the CPU architecture
      id: detect-cpu-arch
      uses: ./.github/actions/arch

    - name: Collect debug information before the build
      if: always()
      uses: ./.github/actions/debug-info

    - name: Prepare the build and run environment
      uses: ./.github/actions/prebuild

    - name: Build MicroShift RPMs
      shell: bash
      run: |
        # See https://github.com/microshift-io/microshift/blob/main/docs/build.md
        # for more information about the build process.

        # Run the RPM build process.
        cd ${GITHUB_WORKSPACE}/
        make rpm \
          USHIFT_BRANCH=${{ inputs.ushift-branch }} \
          OKD_VERSION_TAG=${{ inputs.okd-version-tag }} \
          RPM_OUTDIR=/mnt/rpms

    - name: Convert the MicroShift RPMs to Debian packages
      shell: bash
      run: |
        make rpm-to-deb RPM_OUTDIR=/mnt/rpms

    - name: Install the MicroShift Debian packages
      shell: bash
      run: |
        sudo ./src/deb/install.sh /mnt/rpms/deb

    - name: Start the MicroShift service
      shell: bash
      run: |
        ./src/cluster_manager.sh topolvm-create || exit 1
        sudo systemctl start --no-block microshift.service

    - name: Run a test to verify that MicroShift is functioning properly
      shell: bash
      run: |
        echo "Waiting 5m for the MicroShift service to be ready"
        for _ in $(seq 60); do
            if sudo systemctl -q is-active microshift.service ; then
                printf "\nOK\n"
                break
            fi
            echo -n "." && sleep 5
        done
        if ! sudo systemctl -q is-active microshift.service ; then
            printf "\nFAILED\n" && exit 1
        fi

        # Storage deployments and daemonsets are last to become ready, so it is
        # a good indicator of the MicroShift service being healthy
        echo "Waiting 15m for the MicroShift service to be healthy"
        if ! sudo microshift healthcheck -v=2 --timeout="900s" --custom \
              '{"topolvm-system":{"deployments": ["topolvm-controller"], "daemonsets": ["topolvm-node"]}}'; then
          echo "ERROR: Failed to verify that the MicroShift service is healthy"
          exit 1
        fi

    - name: Cleanup the MicroShift data and packages
      shell: bash
      run: |
        echo y | sudo microshift-cleanup-data --all
        sudo apt purge -y 'microshift*'

        if sudo apt list | grep -Eq ^microshift ; then
          echo "ERROR: Failed to purge the MicroShift packages"
          exit 1
        fi

    # Uncomment this to enable tmate-debug on failure
    # - name: Pause and open tmate debug session
    #   if: failure()
    #   uses: ./.github/actions/tmate-debug

    - name: Collect debug information after the build
      if: always()
      uses: ./.github/actions/debug-info

    - name: Collect sos report for MicroShift
      if: failure()
      shell: bash
      run: |
        # Cannot use the microshift-sos-report script because it was uninstalled.
        # Use the sos command directly instead.
        #
        # Change the default profiles and plugins used in microshift-sos-report
        # to adapt to the Debian environment.
        # Profiles:
        #  - Remove non-existent microshift
        #  - Add storage
        # Plugins:
        #  - Remove unused firewalld and rpm
        #  - Remove non-existent rpmostree
        #  - Add ufw, apt
        sudo sos report \
          --quiet \
          --batch \
          --all-logs \
          --tmp-dir /mnt/tmp \
          --profiles network,security,storage \
          --plugins container_log,crio,logs,ufw,apt
        sudo chmod 644 /mnt/tmp/sosreport-*

    - name: Upload sos report to the GitHub Actions artifact
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: sosreport-microshift-okd-${{ github.job }}-${{ steps.detect-cpu-arch.outputs.arch }}-${{ github.run_id }}
        path: /mnt/tmp/sosreport-*
        compression-level: 0
